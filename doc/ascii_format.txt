Buster Object Format 0.1.0 documentation
========================================
:Author: Christian Johansen
:Email: christian@cjohansen.no

Utility functions with helpers for pretty formatting of arbitrary JavaScript
values. Currently only supports ascii formatting, suitable for command line
utilities. Like +JSON.stringify+ it formats objects recursively, but unlike
+JSON.stringify+, it can handle regular expressions, functions and more.

*buster-object-format* works in browsers and on Node.js.

Table of contents
-----------------
* <<ascii,Ascii formatting>>
* <<customize,Customizing buster-object-format>>
* <<license,License (BSD)>>

[[ascii]]
Ascii Formatting
----------------

+buster.format.ascii+ can take any JavaScript object and format it nicely as
plain text. It uses the helper functions described below to format different
types of object.

+buster.format.ascii(value)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+value+ can be any kind of object, including DOM elements.

Simple object
^^^^^^^^^^^^^

[source,javascript]
----
var sys = require("sys");
var format = require("object-format");

var object = {
    name: "Christian"
};

sys.puts(format.ascii(object));

// Outputs:
// { name: "Christian" }
----

Complex object
^^^^^^^^^^^^^^

[source,javascript]
----
var sys = require("sys");
var format = require("object-format");

var developer = {
    name: "Christian",
    interests: ["Programming", "Guitar", "TV"],

    location: {
        language: "Norway",
        city: "Oslo",

        getLatLon: function getLatLon(callback) {
            // ...
        },

        distanceTo: function distanceTo(location) {
        }
    },

    speak: function () {
        return "Oh hi!";
    }
};

sys.puts(format.ascii(developer));

// Outputs:
// {
//   interests: ["Programming", "Guitar", "TV"],
//   location: {
//     city: "Oslo",
//     distanceTo: function distanceTo() {},
//     getLatLon: function getLatLon() {},
//     language: "Norway"
//   },
//   name: "Christian",
//   speak: function () {}
// }
----

Custom constructor
^^^^^^^^^^^^^^^^^^

If the object to format is not a generic +Object+ object, *buster-object-format*
displays the type of object (i.e. name of constructor). For information on how
to control what constructors will and will not be displayed, see
<<customize,customizing>>.

[source,javascript]
----
var sys = require("sys");
var format = require("object-format");

function Person(name) {
    this.name = name;
}
var dude = new Person("Dude");

sys.puts(format.ascii(dude));

// Outputs:
// [Person] { name: "Dude" }
----

DOM element
^^^^^^^^^^^

DOM elements are formatted as abbreviated HTML source.

[source,javascript]
----

// <p id="sample" class="notice" data-custom="42">Hey there</p>
----

[[customize]]
Customizing buster-object-format
--------------------------------

[[license]]
buster-object-format license
----------------------------

include::../LICENSE[]
