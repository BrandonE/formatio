{
    "docs": [
        {
            "location": "/", 
            "text": "formatio\n\n\nPretty formatting of arbitrary JavaScript values. Currently only supports ascii\nformatting, suitable for command-line utilities. Like \nJSON.stringify\n, it\nformats objects recursively, but unlike \nJSON.stringify\n, it can handle\nregular expressions, functions, circular objects and more.\n\n\nformatio\n is a general-purpose library. It works in browsers (including old\nand rowdy ones, like IE6) and Node. If you need to use it with AMD or as a global, then there's a UMD version in \ndist/\n.\n\n\nInstallation\n\n\nnpm install @sinonjs/formatio\n\n\n\n\nformatio.ascii\n API\n\n\nformatio.ascii\n can take any JavaScript object and format it nicely as plain\ntext. It uses the helper functions described below to format different types of\nobjects.\n\n\nformatio.ascii(object)\n\n\nobject\n can be any kind of object, including DOM elements.\n\n\nSimple object\n\n\nvar formatio = require(\n@sinonjs/formatio\n);\n\nvar object = { name: \nChristian\n };\nconsole.log(formatio.ascii(object));\n\n// Outputs:\n// { name: \nChristian\n }\n\n\n\n\nComplex object\n\n\nvar formatio = require(\n@sinonjs/formatio\n);\n\nvar developer = {\n    name: \nChristian\n,\n    interests: [\nProgramming\n, \nGuitar\n, \nTV\n],\n\n    location: {\n        language: \nNorway\n,\n        city: \nOslo\n,\n\n        getLatLon: function getLatLon(callback) {\n            // ...\n        },\n\n        distanceTo: function distanceTo(location) {\n        }\n    },\n\n    speak: function () {\n        return \nOh hi!\n;\n    }\n};\n\nconsole.log(formatio.ascii(developer));\n\n// Outputs:\n// {\n//   interests: [\nProgramming\n, \nGuitar\n, \nTV\n],\n//   location: {\n//     city: \nOslo\n,\n//     distanceTo: function distanceTo() {},\n//     getLatLon: function getLatLon() {},\n//     language: \nNorway\n\n//   },\n//   name: \nChristian\n,\n//   speak: function () {}\n// }\n\n\n\n\nCustom constructor\n\n\nIf the object to format is not a generic \nObject\n object, \nformatio\n\ndisplays the type of object (i.e. name of constructor). Set the\n\nexcludeConstructors\n (see below) property to control what constructors to\ninclude in formatted output.\n\n\nvar formatio = require(\n@sinonjs/formatio\n);\n\nfunction Person(name) { this.name = name; }\n\nvar dude = new Person(\nDude\n);\nconsole.log(format.ascii(dude));\n\n// Outputs:\n// [Person] { name: \nDude\n }\n\n\n\n\nDOM elements\n\n\nDOM elements are formatted as abbreviated HTML source. 20 characters of\n\ninnerHTML\n is included, and if the content is longer, it is truncated with\n\n\"[...]\"\n. Future editions will add the possibility to format nested markup\nstructures.\n\n\nvar p = document.createElement(\np\n);\np.id = \nsample\n;\np.className = \nnotice\n;\np.setAttribute(\ndata-custom\n, \n42\n);\np.innerHTML = \nHey there, here's some text for ya there buddy\n;\n\nconsole.log(formatio.ascii(p));\n\n// Outputs\n// \nlt;p id=\nsample\n class=\nnotice\n data-custom=\n42\ngt;Hey there, here's so[...]\nlt;/p\ngt;\n/code\n/pre\n\n\n\n\n\nformatio.ascii.func(func)\n\n\nFormats a function like \n\"function [name]() {}\"\n. The name is retrieved from\n\nformatio.functionName\n.\n\n\nformatio.ascii.array(array)\n\n\nFormats an array as \n\"[item1, item2, item3]\"\n where each item is formatted\nwith \nformatio.ascii\n. Circular references are represented in the resulting\nstring as \n\"[Circular]\"\n.\n\n\nformatio.ascii.object(object)\n\n\nFormats all properties of the object with \nformatio.ascii\n. If the object can\nbe fully represented in 80 characters, it's formatted in one line. Otherwise,\nit's nicely indented over as many lines as necessary. Circular references are\nrepresented by \n\"[Circular]\"\n.\n\n\nObjects created with custom constructors will be formatted as\n\n\"[ConstructorName] { ... }\"\n. Set the \nexcludeConstructors\n property to\ncontrol what constructors are included in the output like this.\n\n\nformatio.ascii.element(element)\n\n\nFormats a DOM element as HTML source. The tag name is represented in lower-case\nand all attributes and their values are included. The element's content is\nincluded, up to 20 characters. If the length exceeds 20 characters, it's\ntruncated with a \n\"[...]\"\n.\n\n\nformatio.functionName(func)\n\n\nGuesses a function's name. If the function defines the \ndisplayName\n property\n(used by \nsome debugging tools \nhttp://trac.webkit.org/changeset/42478\n_) it is\npreferred. If it is not found, the \nname\n property is tried. If no name can be\nfound this way, an attempt is made to find the function name by looking at the\nfunction's \ntoString()\n representation.\n\n\nformatio.constructorName(object)\n\n\nAttempts to guess the name of the constructor that created the object. It does\nso by getting the name of \nobject.constructor\n using \nfunctionName\n. If a\nname is found, \nexcludeConstructors\n is consulted. If the constructor name\nmatches any of these elements, an empty string is returned, otherwise the name\nis returned.\n\n\nformatio.ascii\n properties\n\n\nquoteStrings(true)\n\n\nWhether or not to quote simple strings. When set to \nfalse\n, simple strings\nare not quoted. Strings in arrays and objects will still be quoted, but\n\nascii(\"Some string\")\n will not gain additional quotes.\n\n\nlimitChildrenCount(number)\n\n\nThis property allows to limit the number of printed array elements or object\nproperties. When set to 0, all elements will be included in output, any number\ngreater than zero will set the limit to that number.\n\n\nexcludeConstructors ([\"Object\", /^.$/])\n\n\nAn array of strings and/or regular expressions naming constructors that should\nbe stripped from the formatted output. The default value skips objects created\nby \nObject\n and constructors that have one character names (which are\ntypically used in \nObject.create\n shims).\n\n\nWhile you can set this property directly on \nformatio.ascii\n, it is\nrecommended to create an instance of \nformatio.ascii\n and override the\nproperty on that object.\n\n\nStrings\n represent constructor names that should not be represented in the\nformatted output. \nRegular expressions\n are tested against constructor names\nwhen formatting. If the expression is a match, the constructor name is not\nincluded in the formatted output.\n\n\nfunction Person(name) {\n    this.name = name;\n}\n\nvar person = new Person(\nChris\n);\nconsole.log(formatio.ascii(person));\n\n// Outputs\n// [Person] { name: \nChris\n }\n\nvar formatter = Object.create(formatio);\nformatter.excludeConstructors = [\nObject\n, /^.$/, \nPerson\n];\nconsole.log(formatter.ascii(person));\n\n// Outputs\n// { name: \nChris\n }\n\n// Global overwrite, generally not recommended\nformatio.excludeConstructors = [\nObject\n, /^.$/, \nPerson\n];\nconsole.log(formatio.ascii(person));\n\n// Outputs\n// { name: \nChris\n }", 
            "title": "formatio"
        }, 
        {
            "location": "/#formatio", 
            "text": "Pretty formatting of arbitrary JavaScript values. Currently only supports ascii\nformatting, suitable for command-line utilities. Like  JSON.stringify , it\nformats objects recursively, but unlike  JSON.stringify , it can handle\nregular expressions, functions, circular objects and more.  formatio  is a general-purpose library. It works in browsers (including old\nand rowdy ones, like IE6) and Node. If you need to use it with AMD or as a global, then there's a UMD version in  dist/ .", 
            "title": "formatio"
        }, 
        {
            "location": "/#installation", 
            "text": "npm install @sinonjs/formatio", 
            "title": "Installation"
        }, 
        {
            "location": "/#formatioascii-api", 
            "text": "formatio.ascii  can take any JavaScript object and format it nicely as plain\ntext. It uses the helper functions described below to format different types of\nobjects.", 
            "title": "formatio.ascii API"
        }, 
        {
            "location": "/#formatioasciiobject", 
            "text": "object  can be any kind of object, including DOM elements.  Simple object  var formatio = require( @sinonjs/formatio );\n\nvar object = { name:  Christian  };\nconsole.log(formatio.ascii(object));\n\n// Outputs:\n// { name:  Christian  }  Complex object  var formatio = require( @sinonjs/formatio );\n\nvar developer = {\n    name:  Christian ,\n    interests: [ Programming ,  Guitar ,  TV ],\n\n    location: {\n        language:  Norway ,\n        city:  Oslo ,\n\n        getLatLon: function getLatLon(callback) {\n            // ...\n        },\n\n        distanceTo: function distanceTo(location) {\n        }\n    },\n\n    speak: function () {\n        return  Oh hi! ;\n    }\n};\n\nconsole.log(formatio.ascii(developer));\n\n// Outputs:\n// {\n//   interests: [ Programming ,  Guitar ,  TV ],\n//   location: {\n//     city:  Oslo ,\n//     distanceTo: function distanceTo() {},\n//     getLatLon: function getLatLon() {},\n//     language:  Norway \n//   },\n//   name:  Christian ,\n//   speak: function () {}\n// }  Custom constructor  If the object to format is not a generic  Object  object,  formatio \ndisplays the type of object (i.e. name of constructor). Set the excludeConstructors  (see below) property to control what constructors to\ninclude in formatted output.  var formatio = require( @sinonjs/formatio );\n\nfunction Person(name) { this.name = name; }\n\nvar dude = new Person( Dude );\nconsole.log(format.ascii(dude));\n\n// Outputs:\n// [Person] { name:  Dude  }  DOM elements  DOM elements are formatted as abbreviated HTML source. 20 characters of innerHTML  is included, and if the content is longer, it is truncated with \"[...]\" . Future editions will add the possibility to format nested markup\nstructures.  var p = document.createElement( p );\np.id =  sample ;\np.className =  notice ;\np.setAttribute( data-custom ,  42 );\np.innerHTML =  Hey there, here's some text for ya there buddy ;\n\nconsole.log(formatio.ascii(p));\n\n// Outputs\n//  lt;p id= sample  class= notice  data-custom= 42 gt;Hey there, here's so[...] lt;/p gt; /code /pre", 
            "title": "formatio.ascii(object)"
        }, 
        {
            "location": "/#formatioasciifuncfunc", 
            "text": "Formats a function like  \"function [name]() {}\" . The name is retrieved from formatio.functionName .", 
            "title": "formatio.ascii.func(func)"
        }, 
        {
            "location": "/#formatioasciiarrayarray", 
            "text": "Formats an array as  \"[item1, item2, item3]\"  where each item is formatted\nwith  formatio.ascii . Circular references are represented in the resulting\nstring as  \"[Circular]\" .", 
            "title": "formatio.ascii.array(array)"
        }, 
        {
            "location": "/#formatioasciiobjectobject", 
            "text": "Formats all properties of the object with  formatio.ascii . If the object can\nbe fully represented in 80 characters, it's formatted in one line. Otherwise,\nit's nicely indented over as many lines as necessary. Circular references are\nrepresented by  \"[Circular]\" .  Objects created with custom constructors will be formatted as \"[ConstructorName] { ... }\" . Set the  excludeConstructors  property to\ncontrol what constructors are included in the output like this.", 
            "title": "formatio.ascii.object(object)"
        }, 
        {
            "location": "/#formatioasciielementelement", 
            "text": "Formats a DOM element as HTML source. The tag name is represented in lower-case\nand all attributes and their values are included. The element's content is\nincluded, up to 20 characters. If the length exceeds 20 characters, it's\ntruncated with a  \"[...]\" .", 
            "title": "formatio.ascii.element(element)"
        }, 
        {
            "location": "/#formatiofunctionnamefunc", 
            "text": "Guesses a function's name. If the function defines the  displayName  property\n(used by  some debugging tools  http://trac.webkit.org/changeset/42478 _) it is\npreferred. If it is not found, the  name  property is tried. If no name can be\nfound this way, an attempt is made to find the function name by looking at the\nfunction's  toString()  representation.", 
            "title": "formatio.functionName(func)"
        }, 
        {
            "location": "/#formatioconstructornameobject", 
            "text": "Attempts to guess the name of the constructor that created the object. It does\nso by getting the name of  object.constructor  using  functionName . If a\nname is found,  excludeConstructors  is consulted. If the constructor name\nmatches any of these elements, an empty string is returned, otherwise the name\nis returned.", 
            "title": "formatio.constructorName(object)"
        }, 
        {
            "location": "/#formatioascii-properties", 
            "text": "", 
            "title": "formatio.ascii properties"
        }, 
        {
            "location": "/#quotestringstrue", 
            "text": "Whether or not to quote simple strings. When set to  false , simple strings\nare not quoted. Strings in arrays and objects will still be quoted, but ascii(\"Some string\")  will not gain additional quotes.", 
            "title": "quoteStrings(true)"
        }, 
        {
            "location": "/#limitchildrencountnumber", 
            "text": "This property allows to limit the number of printed array elements or object\nproperties. When set to 0, all elements will be included in output, any number\ngreater than zero will set the limit to that number.", 
            "title": "limitChildrenCount(number)"
        }, 
        {
            "location": "/#excludeconstructors-object", 
            "text": "An array of strings and/or regular expressions naming constructors that should\nbe stripped from the formatted output. The default value skips objects created\nby  Object  and constructors that have one character names (which are\ntypically used in  Object.create  shims).  While you can set this property directly on  formatio.ascii , it is\nrecommended to create an instance of  formatio.ascii  and override the\nproperty on that object.  Strings  represent constructor names that should not be represented in the\nformatted output.  Regular expressions  are tested against constructor names\nwhen formatting. If the expression is a match, the constructor name is not\nincluded in the formatted output.  function Person(name) {\n    this.name = name;\n}\n\nvar person = new Person( Chris );\nconsole.log(formatio.ascii(person));\n\n// Outputs\n// [Person] { name:  Chris  }\n\nvar formatter = Object.create(formatio);\nformatter.excludeConstructors = [ Object , /^.$/,  Person ];\nconsole.log(formatter.ascii(person));\n\n// Outputs\n// { name:  Chris  }\n\n// Global overwrite, generally not recommended\nformatio.excludeConstructors = [ Object , /^.$/,  Person ];\nconsole.log(formatio.ascii(person));\n\n// Outputs\n// { name:  Chris  }", 
            "title": "excludeConstructors ([\"Object\", /^.$/])"
        }
    ]
}